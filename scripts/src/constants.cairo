use starknet::ClassHash;

pub const MAX_FEE: felt252 = 9999999999999999;

// Constants for Shrine
pub const INITIAL_DEBT_CEILING: u128 = 500000000000000000000000; // 500_000 (Wad)
pub const MINIMUM_TROVE_VALUE: u128 = 50000000000000000000; // 50 (Wad)

// Constants for Pragma spot
pub const PRAGMA_FRESHNESS_THRESHOLD: u64 = 3600; // 1 hour
pub const PRAGMA_SOURCES_THRESHOLD: u32 = 3;

// Constants for yangs
pub const INITIAL_ETH_AMT: u128 = 1000000000; // 10 ** 9
pub const INITIAL_WBTC_AMT: u128 = 10000; // 10 ** 4
pub const INITIAL_STRK_AMT: u128 = 1000000000; // 10 ** 9

pub const INITIAL_ETH_ASSET_MAX: u128 = 500000000000000000000; // 500 (Wad)
pub const INITIAL_ETH_THRESHOLD: u128 = 800000000000000000000000000; // 80% (Ray)
pub const INITIAL_ETH_PRICE: u128 = 3500000000000000000000; // 3_500 (Wad)
pub const INITIAL_ETH_BASE_RATE: u128 = 20000000000000000000000000; // 2% (Ray)

pub const INITIAL_WBTC_ASSET_MAX: u128 = 10000000000; // 100 (Wad)
pub const INITIAL_WBTC_THRESHOLD: u128 = 850000000000000000000000000; // 85% (Ray)
pub const INITIAL_WBTC_PRICE: u128 = 70000000000000000000000; // 70_000 (Wad)
pub const INITIAL_WBTC_BASE_RATE: u128 = 15000000000000000000000000; // 1.5% (Ray)

pub const INITIAL_STRK_ASSET_MAX: u128 = 100000000000000000000000; // 100_000 (Wad)
pub const INITIAL_STRK_THRESHOLD: u128 = 600000000000000000000000000; // 60% (Ray)
pub const INITIAL_STRK_PRICE: u128 = 1800000000000000000; // 1.80 (Wad)
pub const INITIAL_STRK_BASE_RATE: u128 = 40000000000000000000000000; // 4% (Ray)

// Constants for mocks
pub const WBTC_INITIAL_SUPPLY: u128 = 2099999997690000; // approx. 21_000_000 * 10 ** 8

// Chain constants
pub fn erc20_class_hash() -> ClassHash {
    0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0.try_into().expect('invalid ERC20 class hash')
}